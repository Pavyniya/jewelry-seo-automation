name: Test Coverage Monitor

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [api, web, security, performance]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run tests with coverage
        run: pnpm --filter @jewelry-seo/${{ matrix.app }} test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/${{ matrix.app }}/coverage/lcov.info
          flags: ${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

      - name: Check coverage thresholds
        run: |
          # Check if coverage meets minimum thresholds
          if [ "${{ matrix.app }}" = "api" ] || [ "${{ matrix.app }}" = "web" ] || [ "${{ matrix.app }}" = "security" ]; then
            echo "Checking 80% coverage threshold for ${{ matrix.app }}"
            # Add coverage threshold checking logic here
          fi

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: coverage-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Generate combined coverage report
        run: |
          # Combine coverage from all apps
          mkdir -p combined-coverage
          cp -r apps/api/coverage/* combined-coverage/ 2>/dev/null || true
          cp -r apps/web/coverage/* combined-coverage/ 2>/dev/null || true
          cp -r apps/security/coverage/* combined-coverage/ 2>/dev/null || true
          cp -r apps/performance/coverage/* combined-coverage/ 2>/dev/null || true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: combined-coverage/

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './combined-coverage/coverage-summary.json';

            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const total = coverage.total;

              const comment = `
              📊 **Test Coverage Report**

              - **Lines**: ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})
              - **Functions**: ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})
              - **Branches**: ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})
              - **Statements**: ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})

              ${total.lines.pct >= 80 ? '✅' : '❌'} Coverage threshold: 80%
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }